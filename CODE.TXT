 ARDUINO COD
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Arduino_JSON.h>
#include <LittleFS.h>

const char* ssid = "TP-Link_F23C";
const char* password = "13279158";
bool loggingData = false; // Starea de logging

AsyncWebServer server(80);
AsyncWebSocket ws("/ws");
JSONVar readings;
Adafruit_MPU6050 mpu;

unsigned long lastTime = 0;
unsigned long lastTimeAcc = 0;
unsigned long gyroDelay = 10;
unsigned long accelerometerDelay = 200;

// Sensor deviation variables
float gyroXerror = 0.07;
float gyroYerror = 0.03;
float gyroZerror = 0.01;

// Sensor reading variables
float gyroX = 0, gyroY = 0, gyroZ = 0;
float accX = 0, accY = 0, accZ = 0;

void initMPU() {
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");
}

void initWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("");
  Serial.print("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
  }
  Serial.println("");
  Serial.println("Connected to WiFi");
  Serial.println(WiFi.localIP());
}

String getGyroReadings() {
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  if (abs(g.gyro.x) > gyroXerror) {
    gyroX += g.gyro.x / 50.00;
  }
  if (abs(g.gyro.y) > gyroYerror) {
    gyroY += g.gyro.y / 70.00;
  }
  if (abs(g.gyro.z) > gyroZerror) {
    gyroZ += g.gyro.z / 90.00;
  }

  readings["gyroX"] = String(gyroX);
  readings["gyroY"] = String(gyroY);
  readings["gyroZ"] = String(gyroZ);

  return JSON.stringify(readings);
}

String getAccReadings() {
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  accX = a.acceleration.x;
  accY = a.acceleration.y;
  accZ = a.acceleration.z;

  readings["accX"] = String(accX);
  readings["accY"] = String(accY);
  readings["accZ"] = String(accZ);

  return JSON.stringify(readings);
}

void notifyClients() {
  String gyroReadings = getGyroReadings();
  String accReadings = getAccReadings();
  ws.textAll(gyroReadings);
  ws.textAll(accReadings);
}

void handleWebSocketMessage(void *arg, uint8_t *data, size_t len) {
  AwsFrameInfo *info = (AwsFrameInfo *)arg;
  if (info->final && info->index == 0 && info->len == len && info->opcode == WS_TEXT) {
    data[len] = 0;
    if (strcmp((char *)data, "start") == 0) {
      loggingData = true;
    } else if (strcmp((char *)data, "stop") == 0) {
      loggingData = false;
    } else if (strcmp((char *)data, "reset") == 0) {
      gyroX = gyroY = gyroZ = 0;
      accX = accY = accZ = 0;
    }
  }
}

void onEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len) {
  switch (type) {
    case WS_EVT_CONNECT:
      Serial.printf("WebSocket client connected: %u\n", client->id());
      break;
    case WS_EVT_DISCONNECT:
      Serial.printf("WebSocket client disconnected: %u\n", client->id());
      break;
    case WS_EVT_DATA:
      handleWebSocketMessage(arg, data, len);
      break;
    case WS_EVT_PONG:
    case WS_EVT_ERROR:
      break;
  }
}

void setup() {
  Serial.begin(115200);
  initWiFi();
  initMPU();

  if (!LittleFS.begin()) {
    Serial.println("Failed to mount LittleFS");
    return;
  } else {
    Serial.println("LittleFS mounted successfully");
    Dir dir = LittleFS.openDir("/");
    while (dir.next()) {
      Serial.println(dir.fileName());
    }
  }

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(LittleFS, "/index.html", "text/html");
  });

  server.on("/start", HTTP_GET, [](AsyncWebServerRequest *request) {
    loggingData = true;
    request->send(200, "text/plain", "Logging started");
  });

  server.on("/stop", HTTP_GET, [](AsyncWebServerRequest *request) {
    loggingData = false;
    request->send(200, "text/plain", "Logging stopped");
  });

  server.on("/download", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(LittleFS, "/data.csv", "text/csv");
  });

  server.on("/reset", HTTP_GET, [](AsyncWebServerRequest *request) {
    gyroX = gyroY = gyroZ = 0; // Reset gyroscope readings
    accX = accY = accZ = 0; // Reset accelerometer readings
    request->send(200, "text/plain", "Sensors reset");
  });

  ws.onEvent(onEvent);
  server.addHandler(&ws);
  server.begin();
}

void loop() {
  if (millis() - lastTime > gyroDelay) {
    notifyClients();
    lastTime = millis();
  }
  if (millis() - lastTimeAcc > accelerometerDelay) {
    notifyClients();
    lastTimeAcc = millis();
  }

  if (loggingData) {
    File dataFile = LittleFS.open("/data.csv", "a");
    if (dataFile) {
      sensors_event_t a, g, temp;
      mpu.getEvent(&a, &g, &temp);
      dataFile.printf("%f,%f,%f,%f,%f,%f\n",
                      a.acceleration.x, a.acceleration.y, a.acceleration.z,
                      g.gyro.x, g.gyro.y, g.gyro.z);
      dataFile.close();
    } else {
      Serial.println("Failed to open file for writing");
    }
  }
}

HTML COD 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MPU6050 Telemetry</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        .topnav { background-color: #333; color: white; padding: 10px 20px; text-align: center; }
        .content { display: flex; justify-content: space-around; padding: 20px; }
        .card { background: #f9f9f9; padding: 20px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); border-radius: 5px; }
        .card-title { font-size: 20px; color: #333; margin: 0 0 10px 0; }
        .reading { font-size: 16px; color: #666; }
        .controls { text-align: center; margin-top: 20px; }
        button { padding: 10px 20px; font-size: 16px; cursor: pointer; background: #007BFF; color: white; border: none; border-radius: 5px; margin-right: 10px; }
        button:hover { background: #0056b3; }
        .cube-content { width: 100%; height: 300px; margin: auto; background-color: #fff; }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
</head>
<body>
    <div class="topnav">
        <h1>MPU6050 Telemetry</h1>
    </div>
    <div class="content">
        <div class="card">
            <p class="card-title">GYROSCOPE</p>
            <p><span class="reading">X: <span id="gyroX">0.00</span> rad</span></p>
            <p><span class="reading">Y: <span id="gyroY">0.00</span> rad</span></p>
            <p><span class="reading">Z: <span id="gyroZ">0.00</span> rad</span></p>
        </div>
        <div class="card">
            <p class="card-title">ACCELEROMETER</p>
            <p><span class="reading">X: <span id="accX">0.00</span> ms²</span></p>
            <p><span class="reading">Y: <span id="accY">0.00</span> ms²</span></p>
            <p><span class="reading">Z: <span id="accZ">0.00</span> ms²</span></p>
        </div>
    </div>
    <div class="cube-content" id="3Dcube"></div>
    <div class="controls">
        <button onclick="startLogging()">Start Logging</button>
        <button onclick="stopLogging()">Stop Logging</button>
        <button onclick="downloadData()">Download Data</button>
    </div>

    <script>
        function startLogging() {
            fetch('/start')
                .then(response => {
                    if (response.ok) {
                        console.log("Logging started");
                    } else {
                        throw new Error('Failed to start logging');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function stopLogging() {
            fetch('/stop')
                .then(response => {
                    if (response.ok) {
                        console.log("Logging stopped");
                    } else {
                        throw new Error('Failed to stop logging');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function downloadData() {
            window.location.href = '/download';
        }

        const updateReadings = (data) => {
            document.getElementById('gyroX').textContent = parseFloat(data.gyroX).toFixed(2);
            document.getElementById('gyroY').textContent = parseFloat(data.gyroY).toFixed(2);
            document.getElementById('gyroZ').textContent = parseFloat(data.gyroZ).toFixed(2);
            document.getElementById('accX').textContent = parseFloat(data.accX).toFixed(2);
            document.getElementById('accY').textContent = parseFloat(data.accY).toFixed(2);
            document.getElementById('accZ').textContent = parseFloat(data.accZ).toFixed(2);

            // Update cube rotation
            cube.rotation.x = parseFloat(data.gyroY);
            cube.rotation.y = parseFloat(data.gyroX);
            cube.rotation.z = parseFloat(data.gyroZ);
        };

        const ws = new WebSocket(`ws://${window.location.hostname}/ws`);
        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            updateReadings(data);
        };

        let scene, camera, renderer, cube;
        const elementId = '3Dcube';

        function init3D(){
          scene = new THREE.Scene();
          scene.background = new THREE.Color(0xffffff);
          camera = new THREE.PerspectiveCamera(75, elementWidth() / elementHeight(), 0.1, 1000);
          renderer = new THREE.WebGLRenderer({ antialias: true });
          renderer.setSize(elementWidth(), elementHeight());
          document.getElementById(elementId).appendChild(renderer.domElement);

          const geometry = new THREE.BoxGeometry(1, 1, 1);
          const cubeMaterials = [
            new THREE.MeshBasicMaterial({color:0x03045e}),
            new THREE.MeshBasicMaterial({color:0x023e8a}),
            new THREE.MeshBasicMaterial({color:0x0077b6}),
            new THREE.MeshBasicMaterial({color:0x03045e}),
            new THREE.MeshBasicMaterial({color:0x023e8a}),
            new THREE.MeshBasicMaterial({color:0x0077b6}),
          ];
          const material = new THREE.MeshFaceMaterial(cubeMaterials);
          cube = new THREE.Mesh(geometry, material);
          scene.add(cube);
          camera.position.z = 2;
          animate();
        }

        function elementWidth() { return document.getElementById(elementId).clientWidth; }
        function elementHeight() { return document.getElementById(elementId).clientHeight; }

        function onWindowResize(){
          camera.aspect = elementWidth() / elementHeight();
          camera.updateProjectionMatrix();
          renderer.setSize(elementWidth(), elementHeight());
        }

        window.addEventListener('resize', onWindowResize, false);

        function animate() {
          requestAnimationFrame(animate);
          renderer.render(scene, camera);
        }

        init3D();
    </script>
</body>
</html>
 
SCRIPT COD

let scene, camera, renderer, cube;
const elementId = '3Dcube';

function init3D(){
  scene = new THREE.Scene();
  scene.background = new THREE.Color(0xffffff);
  camera = new THREE.PerspectiveCamera(75, elementWidth() / elementHeight(), 0.1, 1000);
  renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(elementWidth(), elementHeight());
  document.getElementById(elementId).appendChild(renderer.domElement);

  const geometry = new THREE.BoxGeometry(5, 1, 4);
  const cubeMaterials = [
    new THREE.MeshBasicMaterial({color:0x03045e}),
    new THREE.MeshBasicMaterial({color:0x023e8a}),
    new THREE.MeshBasicMaterial({color:0x0077b6}),
    new THREE.MeshBasicMaterial({color:0x03045e}),
    new THREE.MeshBasicMaterial({color:0x023e8a}),
    new THREE.MeshBasicMaterial({color:0x0077b6}),
  ];
  const material = new THREE.MeshFaceMaterial(cubeMaterials);
  cube = new THREE.Mesh(geometry, material);
  scene.add(cube);
  camera.position.z = 5;
  animate();
}

function elementWidth() { return document.getElementById(elementId).clientWidth; }
function elementHeight() { return document.getElementById(elementId).clientHeight; }

function onWindowResize(){
  camera.aspect = elementWidth() / elementHeight();
  camera.updateProjectionMatrix();
  renderer.setSize(elementWidth(), elementHeight());
}

window.addEventListener('resize', onWindowResize, false);

function animate() {
  requestAnimationFrame(animate);
  renderer.render(scene, camera);
}

init3D();

if (!!window.EventSource) {
  var source = new EventSource('/events');

  source.onopen = function() { console.log("Events Connected"); };
  source.onerror = function(e) {
    if (e.target.readyState !== EventSource.OPEN) {
      console.log("Events Disconnected, attempting to reconnect");
      source = new EventSource('/events');  // Attempt to reconnect
    }
  };

  source.addEventListener('gyro_readings', function(e) {
    var obj = JSON.parse(e.data);
    document.getElementById("gyroX").textContent = obj.gyroX;
    document.getElementById("gyroY").textContent = obj.gyroY;
    document.getElementById("gyroZ").textContent = obj.gyroZ;
    cube.rotation.x = obj.gyroY;
    cube.rotation.z = obj.gyroX;
    cube.rotation.y = obj.gyroZ;
  }, false);

  source.addEventListener('accelerometer_readings', function(e) {
    var obj = JSON.parse(e.data);
    document.getElementById("accX").textContent = obj.accX;
    document.getElementById("accY").textContent = obj.accY;
    document.getElementById("accZ").textContent = obj.accZ;
  }, false);
}

function resetPosition(axis){
  var xhr = new XMLHttpRequest();
  xhr.open("GET", "/" + axis, true);
  xhr.onload = function () {
    if (xhr.status >= 200 && xhr.status < 300) {
      console.log('Reset successful: ', axis);
    } else {
      console.error('Reset failed: ', axis, xhr.statusText);
    }
  };
  xhr.onerror = function () { console.error('Request failed'); };
  xhr.send();
}